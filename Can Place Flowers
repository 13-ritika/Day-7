//https://leetcode.com/problems/can-place-flowers/
// (greedy, array)
class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        if(n==0) return true;
        if(flowerbed.length==1 && flowerbed[0]==0 && n==1) return true;
        else if (flowerbed.length==2 && flowerbed[0]==0 && flowerbed[1]==0 && n==1) return true;
        else if (flowerbed.length==2 && ((flowerbed[0]==1 || flowerbed[1]==1) || n>1)) return false;
        for(int i=0;i<flowerbed.length;i++){
            if(n==0) return true;
            if(i==0){
                if(flowerbed[i]==0 && flowerbed[i+1]==0){n=n-1; flowerbed[i]=1;}
            }
            else if(i==flowerbed.length-1){
                if(flowerbed[flowerbed.length-1]==0 && flowerbed[flowerbed.length-2]==0){n=n-1; flowerbed[i]=1;}
            }
            else {
                if(flowerbed[i]==0 && flowerbed[i-1]==0 && flowerbed[i+1]==0){n=n-1; flowerbed[i]=1;}
            }
        }
        return n==0;
    }
}

// Solution
public class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int count = 0;
        for(int i = 0; i < flowerbed.length && count < n; i++) {
            if(flowerbed[i] == 0) {
               int next = (i == flowerbed.length - 1) ? 0 : flowerbed[i + 1]; 
               int prev = (i == 0) ? 0 : flowerbed[i - 1];
               if(next == 0 && prev == 0) {
                   flowerbed[i] = 1;
                   count++;
               }
            }
        }
        
        return count == n;
    }
}
